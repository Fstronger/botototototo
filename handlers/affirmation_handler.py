import json
import os
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes

AFFIRMATIONS = [
    "üíª –Ø —Å–ø—Ä–∞–≤–ª—è—é—Å—å —Å –ª—é–±—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, —Å—Ç—Ä–æ–∫–∞ –∑–∞ —Å—Ç—Ä–æ–∫–æ–π.",
    "‚öôÔ∏è –ú–æ–π –∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º.",
    "üåê –Ø —Å–æ–∑–¥–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø—Ä–æ—â–∞—é—Ç –∂–∏–∑–Ω—å –ª—é–¥—è–º.",
    "üß† –ú–æ—è –ª–æ–≥–∏–∫–∞ –∏ –º—ã—à–ª–µ–Ω–∏–µ ‚Äî –º–æ–π —Å–∏–ª—å–Ω–µ–π—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.",
    "‚òï –î–∞–∂–µ —Å–ª–æ–∂–Ω—ã–µ –±–∞–≥–∏ ‚Äî –ª–∏—à—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–æ—ë–º –ø—É—Ç–∏.",
    "üöÄ –Ø —Ä–∞—Å—Ç—É –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º.",
    "‚è±Ô∏è –Ø —É–º–µ—é –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã.",
    "üß© –Ø –Ω–∞—Ö–æ–∂—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.",
    "üîê –Ø —Å–æ–∑–¥–∞—é –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥.",
    "üñ•Ô∏è –Ø —Ü–µ–Ω–µ–Ω(—Ü–µ–Ω–Ω–∞) –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∏ –º–æ–∏ –∑–Ω–∞–Ω–∏—è –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã.",
    "üìà –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –ª—É—á—à–µ –≤ —Å–≤–æ—ë–º –¥–µ–ª–µ.",
    "üåø –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º.",
    "üìö –Ø –ª–µ–≥–∫–æ —É—á—É—Å—å –Ω–æ–≤–æ–º—É –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "üßò –Ø —Å–ø–æ–∫–æ–µ–Ω(—Å–ø–æ–∫–æ–π–Ω–∞) –¥–∞–∂–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.",
    "üí¨ –ú–æ–∏ –∏–¥–µ–∏ –≤–∞–∂–Ω—ã ‚Äî —è –Ω–µ –±–æ—é—Å—å –∏–º–∏ –¥–µ–ª–∏—Ç—å—Å—è.",
    "ü§ù –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ —Ü–µ–Ω—é –≤–∫–ª–∞–¥ –¥—Ä—É–≥–∏—Ö.",
    "üîç –Ø –∑–∞–º–µ—á–∞—é –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ —É–ø—É—Å–∫–∞—é—Ç.",
    "üåü –ú–æ—è —Ä–∞–±–æ—Ç–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.",
    "üîß –Ø –Ω–µ –±–æ—é—Å—å –æ—à–∏–±–æ–∫ ‚Äî —è –∏–∑–≤–ª–µ–∫–∞—é –∏–∑ –Ω–∏—Ö –æ–ø—ã—Ç.",
    "üß≠ –Ø –∏–¥—É –ø–æ —Å–≤–æ–µ–º—É –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º."
]

DATA_FILE = "affirmation_data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def handle_affirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    now = datetime.utcnow()

    user_entry = data.get(user_id)

    if user_entry:
        last_time = datetime.fromisoformat(user_entry["timestamp"])
        if now - last_time < timedelta(hours=24):
            affirmation = user_entry["text"]
        else:
            affirmation = random.choice(AFFIRMATIONS)
            data[user_id] = {"timestamp": now.isoformat(), "text": affirmation}
            save_data(data)
    else:
        affirmation = random.choice(AFFIRMATIONS)
        data[user_id] = {"timestamp": now.isoformat(), "text": affirmation}
        save_data(data)

    message = (
        "*–¢–≤–æ—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è:*\n\n"
        f"_{affirmation}_\n\n"
        "–ü–æ–≤—Ç–æ—Ä—è–π –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ú–æ–∂–µ—Ç, –ø–æ–º–æ–∂–µ—Ç üôÇ –ê –º–æ–∂–µ—Ç ‚Äî –Ω–µ—Ç. –ù–æ —Ç—ã –ø–æ–ø—Ä–æ–±—É–π."
    )

    await update.message.reply_text(message, parse_mode="Markdown")
